// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  bio       String?
  birthDate String?
  origin    String?
  latitude  Float?
  longitude Float?
  address   String?
  isAdmin   Boolean  @default(false)
  isApproved Boolean @default(true) // 일본인 여성만 가입 가능하므로 기본 승인
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  comments  Comment[]
  reports   Report[]

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String   // 会いましょう, 韓国生活情報, 譲り/売ります, 何でも掲示板
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isPinned    Boolean  @default(false)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  comments    Comment[]
  reports     Report[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId  String?  // 대댓글용
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reports   Report[]

  @@map("comments")
}

model Report {
  id        String   @id @default(cuid())
  type      String   // "post", "comment", "user"
  targetId  String   // 신고 대상 ID
  reason    String
  reporterId String
  reporter  User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  isResolved Boolean @default(false)
  createdAt DateTime @default(now())

  @@map("reports")
}